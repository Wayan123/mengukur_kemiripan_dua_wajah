# -*- coding: utf-8 -*-
"""Mengukur_kemiripan_2_wajah_GPU.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p8HG0lZDeS8muQzRujcp0-73896du1dj
"""

# !pip install face_recognition

import face_recognition
import numpy as np
import os
import matplotlib.pyplot as plt
from imgaug import augmenters as iaa

def hitung_kemiripan_wajah(direktori_1, direktori_2):
    encoding_1 = []
    encoding_2 = []

    # Memuat gambar dari direktori 1
    for foto in os.listdir(direktori_1):
        foto_path = os.path.join(direktori_1, foto)
        gambar = face_recognition.load_image_file(foto_path)
        wajah = face_recognition.face_encodings(gambar)

        if len(wajah) > 0:
            encoding_1.append(wajah[0])

    # Memuat gambar dari direktori 2
    for foto in os.listdir(direktori_2):
        foto_path = os.path.join(direktori_2, foto)
        gambar = face_recognition.load_image_file(foto_path)
        wajah = face_recognition.face_encodings(gambar)

        if len(wajah) > 0:
            encoding_2.append(wajah[0])

    if len(encoding_1) == 0 or len(encoding_2) == 0:
        # Jika tidak ada wajah yang terdeteksi pada salah satu direktori
        return 0.0

    # Menghitung kemiripan menggunakan metode jarak terdekat
    kemiripan_min = 1.0  # Inisialisasi dengan nilai maksimum
    for encode_1 in encoding_1:
        distances = face_recognition.face_distance(encoding_2, encode_1)
        kemiripan = 1 - np.min(distances)
        if kemiripan < kemiripan_min:
            kemiripan_min = kemiripan

    # Mengembalikan nilai kemiripan antara 0 dan 1 (semakin dekat ke 0, semakin mirip)
    return kemiripan_min

# Contoh penggunaan
direktori_1 = "ken"
direktori_2 = "wahidin"

kemiripan = hitung_kemiripan_wajah(direktori_1, direktori_2)
print("Kemiripan antara Wajah_1 dan Wajah_2 adalah:", kemiripan * 100, "%")

# Augmentasi gambar
seq = iaa.Sequential([
    iaa.Fliplr(0.5),  # Flip horizontal secara acak
    iaa.Affine(rotate=(-20, 20)),  # Rotasi gambar dengan rentang -20 hingga 20 derajat
    iaa.GaussianBlur(sigma=(0, 1.0)),  # Penambahan Gaussian blur secara acak
    iaa.AdditiveGaussianNoise(scale=(0, 0.1 * 255)),  # Penambahan noise Gaussian secara acak
    iaa.ContrastNormalization((0.5, 2.0)),  # Normalisasi kontras secara acak
    iaa.Affine(scale=(0.8, 1.2)),  # Skala gambar dengan rentang 0.8 hingga 1.2
    iaa.Sometimes(0.5, iaa.PerspectiveTransform(scale=(0.01, 0.1)))  # Transformasi perspektif dengan kemungkinan 50%
])

# Menampilkan gambar dari direktori 1
fig, ax = plt.subplots(3, len(os.listdir(direktori_1)), figsize=(10, 5))
for i, foto in enumerate(os.listdir(direktori_1)):
    foto_path = os.path.join(direktori_1, foto)
    gambar = plt.imread(foto_path)
    ax[0, i].imshow(gambar)
    ax[0, i].axis('off')
    ax[0, i].set_title('Asli ' + str(i+1))

    # Augmentasi gambar
    gambar_augmented_1 = seq.augment_image(gambar)
    ax[1, i].imshow(gambar_augmented_1)
    ax[1, i].axis('off')
    ax[1, i].set_title('Augmentasi ' + str(i+1) + ' (1)')

    gambar_augmented_2 = seq.augment_image(gambar)
    ax[2, i].imshow(gambar_augmented_2)
    ax[2, i].axis('off')
    ax[2, i].set_title('Augmentasi ' + str(i+1) + ' (2)')

plt.suptitle('Direktori 1 (Asli dan Augmentasi)')
plt.show()

# Menampilkan gambar dari direktori 2
fig, ax = plt.subplots(3, len(os.listdir(direktori_2)), figsize=(10, 5))
for i, foto in enumerate(os.listdir(direktori_2)):
    foto_path = os.path.join(direktori_2, foto)
    gambar = plt.imread(foto_path)
    ax[0, i].imshow(gambar)
    ax[0, i].axis('off')
    ax[0, i].set_title('Asli ' + str(i+1))

    # Augmentasi gambar
    gambar_augmented_1 = seq.augment_image(gambar)
    ax[1, i].imshow(gambar_augmented_1)
    ax[1, i].axis('off')
    ax[1, i].set_title('Augmentasi ' + str(i+1) + ' (1)')

    gambar_augmented_2 = seq.augment_image(gambar)
    ax[2, i].imshow(gambar_augmented_2)
    ax[2, i].axis('off')
    ax[2, i].set_title('Augmentasi ' + str(i+1) + ' (2)')

plt.suptitle('Direktori 2 (Asli dan Augmentasi)')
plt.show()